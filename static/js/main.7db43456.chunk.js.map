{"version":3,"sources":["component/Statistic.js","component/Section.js","component/FeedbackOptions.js","component/Notification.js","component/App.js","index.js"],"names":["Statistic","good","neutral","bad","total","positivePercentage","className","prototype","PropTypes","number","isRequired","countPositive","Section","title","children","string","object","FeedbackOptions","options","onLeaveFeedback","console","log","map","type","key","onClick","Notification","message","INITIAL_STATE","App","state","buttonType","setState","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","Math","ceil","this","Component","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"2SAGMA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OAChB,yBAAKC,UAAU,aACb,uCAAaL,GACb,0CAAgBC,GAChB,sCAAYC,GACZ,wCAAcC,GACd,mDAAyBC,EAAzB,OAIJL,EAAUO,UAAY,CACpBN,KAAMO,IAAUC,OAAOC,WACvBR,QAASM,IAAUC,OAAOC,WAC1BP,IAAKK,IAAUC,OAAOC,WACtBN,MAAOI,IAAUC,OAAOC,WACxBC,cAAeH,IAAUC,OAAOC,YAGnBV,QClBTY,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,6BACGD,EACAC,IAGLF,EAAQL,UAAY,CAClBM,MAAOL,IAAUO,OAAOL,WACxBI,SAAUN,IAAUQ,OAAON,YAGdE,QCXTK,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAQlC,OAPAC,QAAQC,IACNH,EAAQI,KAAI,SAAAC,GAAI,OACd,4BAAQC,IAAKD,EAAMA,KAAK,SAASE,QAAS,kBAAMN,EAAgBI,KAC7DA,OAKL,6BACGL,EAAQI,KAAI,SAAAC,GAAI,OACf,4BAAQC,IAAKD,EAAMA,KAAK,SAASE,QAAS,kBAAMN,EAAgBI,KAC7DA,QAOXN,EAAgBV,UAAY,CAC1BW,QAASV,IAAUC,OAAOC,WAC1BS,gBAAiBX,IAAUC,OAAOC,YAGrBO,QCxBTS,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,6BAAMA,IAC5CD,EAAanB,UAAY,CACvBoB,QAASnB,IAAUO,OAAOL,YAGbgB,QCDTE,G,MAAgB,CACpB3B,KAAM,EACNC,QAAS,EACTC,IAAK,IAGc0B,E,4MAKnBC,M,eACKF,G,EAGLG,WAAa,SAAAR,GACX,EAAKS,UAAS,SAAAF,GACZ,OAAO,eAAGP,EAAOO,EAAMP,GAAQ,O,EAInCU,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKL,OAAOM,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,I,EAEvEC,gCAAkC,SAACnC,EAAOH,GAAR,OAChCuC,KAAKC,KAAa,IAAPxC,EAAcG,GAASoC,KAAKC,KAAa,IAAPxC,EAAcG,GAAS,G,uDAE5D,IACAH,EAASyC,KAAKZ,MAAd7B,KAEFG,EAAQsC,KAAKT,qBACbtB,EAAgB+B,KAAKH,gCAAgCnC,EAAOH,GAElE,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CAASY,MAAM,yBACb,kBAAC,EAAD,CACEK,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBuB,KAAKX,cAG1B,kBAAC,EAAD,CAASlB,MAAM,0BACf,kBAAC,EAAD,CAASA,MAAM,cACF,IAAVT,EACC,kBAAC,EAAD,CAAcuB,QAAQ,sBAEtB,kBAAC,EAAD,CACE1B,KAAMyC,KAAKZ,MAAM7B,KACjBC,QAASwC,KAAKZ,MAAM5B,QACpBC,IAAKuC,KAAKZ,MAAM3B,IAChBC,MAAOA,EACPC,mBAAoBM,U,GA7CDgC,aAAZd,EACZe,aAAe,GCVxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7db43456.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistic = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <div className=\"statistic\">\r\n    <span>Good: {good}</span>\r\n    <span>Neutral: {neutral}</span>\r\n    <span>Bad: {bad}</span>\r\n    <span>Total: {total}</span>\r\n    <span>PositiveFeedback: {positivePercentage}%</span>\r\n  </div>\r\n);\r\n\r\nStatistic.prototype = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  countPositive: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistic;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <div>\r\n    {title}\r\n    {children}\r\n  </div>\r\n);\r\nSection.prototype = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  console.log(\r\n    options.map(type => (\r\n      <button key={type} type=\"button\" onClick={() => onLeaveFeedback(type)}>\r\n        {type}\r\n      </button>\r\n    )),\r\n  );\r\n  return (\r\n    <div>\r\n      {options.map(type => (\r\n        <button key={type} type=\"button\" onClick={() => onLeaveFeedback(type)}>\r\n          {type}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.prototype = {\r\n  options: PropTypes.number.isRequired,\r\n  onLeaveFeedback: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => <div>{message}</div>;\r\nNotification.prototype = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component, Fragment } from 'react';\r\nimport Statistic from './Statistic';\r\nimport Section from './Section';\r\nimport FeedbackOptions from './FeedbackOptions';\r\nimport Notification from './Notification';\r\nimport '../css/style.css';\r\n\r\nconst INITIAL_STATE = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0,\r\n};\r\n\r\nexport default class App extends Component {\r\n  static defaultProps = {};\r\n\r\n  static propTypes = {};\r\n\r\n  state = {\r\n    ...INITIAL_STATE,\r\n  };\r\n\r\n  buttonType = type => {\r\n    this.setState(state => {\r\n      return { [type]: state[type] + 1 };\r\n    });\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    return Object.values(this.state).reduce((acc, value) => acc + value, 0);\r\n  };\r\n  countPositiveFeedbackPercentage = (total, good) =>\r\n    Math.ceil((good * 100) / total) ? Math.ceil((good * 100) / total) : 0;\r\n\r\n  render() {\r\n    const { good } = this.state;\r\n\r\n    const total = this.countTotalFeedback();\r\n    const countPositive = this.countPositiveFeedbackPercentage(total, good);\r\n\r\n    return (\r\n      <Fragment>\r\n        <Section title=\"Pleace leave feedback\">\r\n          <FeedbackOptions\r\n            options={['good', 'neutral', 'bad']}\r\n            onLeaveFeedback={this.buttonType}\r\n          />\r\n        </Section>\r\n        <Section title=\"Pleace leave feedback\"></Section>\r\n        <Section title=\"Statistics\">\r\n          {total === 0 ? (\r\n            <Notification message=\"No feedback given\" />\r\n          ) : (\r\n            <Statistic\r\n              good={this.state.good}\r\n              neutral={this.state.neutral}\r\n              bad={this.state.bad}\r\n              total={total}\r\n              positivePercentage={countPositive}\r\n            />\r\n          )}\r\n        </Section>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './component/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}